import "plenary.job" as Job
import "plenary.path" as Path
import "buf.menu" as menu
import "telescope.previewers" as tsprv

get_cwd = ->
  vim.loop.cwd!

get_file = ->
  f = vim.fn.expand "%"
  p = Path\new f

  unless p\is_file!
    error "nvim-buf: #{ f } is not a file"

  f

run_job = (subcmd, subargs = {}) ->
  unless subcmd
    error "nvim-buf(internal): no subcommand specified; please report bug"

  cmdargs = { subcmd }
  table.insert cmdargs, v for v in *subargs

  errs = {}
  j = Job\new
    cwd: get_cwd!
    command: "buf"
    args: cmdargs
    on_stderr: (err, data) ->
      errs[] = err

  r, ok = j\sync!
  r, ok, errs

output = (r, ok) ->
  print (table.concat r, "\n"), ok

buf =
  config:
    autoformat: true

internal = {}

internal.lint = (file) ->
  r, ok = run_job "lint", { "--path", file }
  unless ok
    error "nvim-buf: unable to run buf lint - is it installed?"

  -- str path:num line:num column:str issue
  issues = {}
  for v in *r
    path, lnum, col, message = v\match "([^:]+):(%d+):(%d+):([^:]+)"

    unless path and lnum and col and message
      error "bufbuild.nvim: failed to detect data from #{ v }"

    issues[] =
      lnum: tonumber lnum
      col: tonumber col
      :message
      -- could probably determine this somehow, idk
      severity: vim.diagnostic.severity.WARN
  
  issues

internal.ls = ->
  r, ok = run_job "ls-files"
  unless ok
    error "nvim-buf: unable to list files"

  output r, ok

  files = {}
  for i, v in ipairs r
    files[] = { id: i, title: v, path: v }
  files

-- to be made into internals --
buf.breaking = ->
  r, ok = run_job "breaking"
  unless ok
    error "nvim-buf: unable to run buf breaking - is it installed?"

  output r, ok

buf.build = ->
  r, ok = run_job "build"
  unless ok
    error "nvim-buf: unable to run buf build"

  output r, ok
-- end to-be-internals --

buf.lint = ->
  issues = vim.fn.expand "%"
    |> internal.lint

  bufnr = vim.api.nvim_get_current_buf!
  vim.diagnostic.set internal.ns, bufnr, issues
  vim.diagnostic.show internal.ns

buf.generate = ->
  r, ok = run_job "generate"

  unless ok != nil and ok == 0
    print "nvim-buf: buf generate failed with exit code #{ ok }"

buf.format = ->
  _, ok = run_job "format", { "-w", get_file! }
  unless ok
    print "nvim-buf: buf format failed with exit code #{ ok }"

  -- reload buffer
  vim.cmd [[ :edit ]]

buf.registry = ->
  r, ok = run_job "registry"
  unless ok
    error "nvim-buf: unable to run buf registry"

  output r, ok

buf.ls = ->
  files = internal.ls!

  menu.protos files, {
    cwd: get_cwd!
  }

buf.setup = (opt = {}) ->
  buf.config = vim.tbl_deep_extend "force", buf.config, opt

  if buf.config.autoformat or true
    vim.api.nvim_create_autocmd { "BufWritePost" },
      pattern: "*.proto"
      command: "execute \"lua require('buf').format()\""

  internal.ns = vim.api.nvim_create_namespace "bufbuild.nvim"

  vim.diagnostic.config {
    virtual_text: true
    signs: true
  }, internal.ns

  nil

export default buf
